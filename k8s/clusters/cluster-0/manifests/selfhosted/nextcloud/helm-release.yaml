---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: nextcloud
  namespace: selfhosted
spec:
  releaseName: nextcloud
  interval: 15m
  chart:
    spec:
      # renovate: registryUrl=https://nextcloud.github.io/helm/
      chart: nextcloud
      version: 3.5.21
      sourceRef:
        kind: HelmRepository
        name: nextcloud-charts
        namespace: flux-system
      interval: 15m
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    image:
      tag: 26.0.3-fpm

    ingress:
      enabled: true
      className: "nginx-external"
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-production"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For, X-Real-IP, X-Frame-Options, X-Content-Type-Options, X-Forwarded-Proto"
        nginx.ingress.kubernetes.io/proxy-body-size: "10G"
        nginx.ingress.kubernetes.io/proxy-buffering: "off"
        nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
        nginx.ingress.kubernetes.io/server-snippet: |-
          server_tokens off;
          proxy_hide_header X-Powered-By;

          # Rule borrowed from .htaccess to handle Microsoft DAV clients
          location = / {
            if ( $http_user_agent ~ ^DavClnt ) {
              return 302 /remote.php/webdav/$is_args$args;
            }
          }

          location = /robots.txt {
              allow all;
              log_not_found off;
              access_log off;
          }

          location ^~ /.well-known {

            # The rules in this block are an adaptation of the rules
            # in .htaccess that concern /.well-known.

            location = /.well-known/carddav { return 301 /remote.php/dav/; }
            location = /.well-known/caldav  { return 301 /remote.php/dav/; }
            
            location /.well-known/acme-challenge    { try_files $uri $uri/ =404; }
            location /.well-known/pki-validation    { try_files $uri $uri/ =404; }
            
            # Let Nextcloud's API for /.well-known URIs handle all other
            # requests by passing them to the front-end controller.
            return 301 /index.php$request_uri;
          }

          # Rules borrowed from .htaccess to hide certain paths from clients
          location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
            deny all;
          }
          location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
            deny all;
          }

          # Rule borrowed from .htaccess
          #location /remote {
          #    return 301 /remote.php$request_uri;
          #}

      tls:
        - hosts:
            - &host nc.${SECRET_DOMAIN}
          secretName: tls.nextcloud

    nextcloud:
      extraInitContainers:
        - name: wait-database
          image: alpine:3.18.2
          imagePullPolicy: IfNotPresent
          command:
            - sh
          args:
            - -c
            - >-
              until nc -w 1 -v $MYSQL_HOST:3306 || nc -w 1 -v $POSTGRES_HOST:5432;
              do echo "Waiting for database";
              done
          env:
            - name: POSTGRES_HOST
              value: postgres.database.svc
        - name: wait-redis
          image: alpine:3.18.2
          imagePullPolicy: IfNotPresent
          command:
            - sh
          args:
            - -c
            - >-
              until nc -w 1 -v $REDIS_HOST:$REDIS_HOST_PORT;
              do echo "Waiting for Redis";
              done
          env:
            - name: REDIS_HOST
              value: nextcloud-redis-master
            - name: REDIS_HOST_PORT
              value: "6379"

      host: *host
      username: admin
      password: ${SECRET_NEXTCLOUD_ADMIN_PASSWORD}
      mail:
        enabled: true
        fromAddress: nc
        domain: ${SECRET_DOMAIN}
        smtp:
          host: ${SECRET_SMTP_HOST}
          secure: ssl
          port: 465
          authtype: LOGIN
          name: ${SECRET_NEXTCLOUD_MAIL_USER}
          password: ${SECRET_NEXTCLOUD_MAIL_PASSWORD}
      extraVolumes:
        - name: media
          nfs:
            server: ${SECRET_NAS1}
            path: /mnt/fatguys/Media
        - name: photos
          nfs:
            server: ${SECRET_NAS1}
            path: /mnt/fatguys/Photos
      extraVolumeMounts:
        - name: media
          mountPath: /media
        - name: photos
          mountPath: /photos

      # extraVolumes:
      #   - name: media
      #     type: custom
      #     volumeSpec:
      #       nfs:
      #         server: ${SECRET_NAS1}
      #         path: /mnt/fatguys/Media
      #     mountPath: /media
      #     readOnly: true

    nginx:
      ## You need to set an fpm version of the image for nextcloud if you want to use nginx!
      enabled: true

    internalDatabase:
      enabled: false

    externalDatabase:
      enabled: true
      type: postgresql
      host: postgres.database
      database: nextcloud
      password: ${SECRET_NEXTCLOUD_DB_PASSWORD}
      user: ncuser

    redis:
      enabled: true
      auth:
        enabled: true
        password: ${SECRET_NEXTCLOUD_REDIS_PASSWORD}
      master:
        persistence:
          enabled: false
      replica:
        persistence:
          enabled: false

    postgresql:
      enabled: false
      persistence:
        enabled: true
        existingClaim: pvc-nextcloud-db
        size: 1Mi
      global:
        postgresql:
          postgresqlUsername: ncuser
          postgresqlPassword: ${SECRET_NEXTCLOUD_DB_PASSWORD}
          postgresqlDatabase: nextcloud

    cronjob:
      enabled: true
      failedJobsHistoryLimit: 1
      successfulJobsHistoryLimit: 1

    persistence:
      enabled: true
      accessMode: ReadWriteMany
      size: 1Mi
      existingClaim: nextcloud-nfs-config

    # this seems to be required for nextcloud initialization which takes a long time
    startupProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 30
      successThreshold: 1

    # livenessProbe:
    #   enabled: false

    # readinessProbe:
    #   enabled: false

    resources:
      requests:
        cpu: 35m
        memory: 164M
      # limits:
      #   memory: 508M
