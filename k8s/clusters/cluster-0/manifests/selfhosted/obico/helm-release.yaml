---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app obico
  namespace: selfhosted
spec:
  interval: 5m
  chart:
    spec:
      chart: kah-common-chart
      version: 1.1.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 15m
  values:
    global:
      nameOverride: *app
    image:
      repository: docker.io/thespaghettidetective/web
      tag: 
      pullPolicy: IfNotPresent
    command: sh -c 'python manage.py migrate && python manage.py collectstatic -v 2 --noinput && python manage.py runserver --nostatic --noreload 0.0.0.0:3334'

    env:
      EMAIL_HOST: '${SECRET_SMTP_HOST}'
      EMAIL_HOST_USER: '${SECRET_TVO_EMAIL}'
      EMAIL_HOST_PASSWORD: '${SECRET_GENERIC_EMAIL_PASSWORD}'
      EMAIL_PORT: '587'
      EMAIL_USE_TLS: 'true'
      DEFAULT_FROM_EMAIL: '${SECRET_GENERIC_EMAIL}'
      DEBUG: 'false'   # Don't set DEBUG to True unless you know what you are doing. Otherwise the static files will be cached in browser until hard-refresh
      SITE_USES_HTTPS: 'false'
      SITE_IS_PUBLIC: 'false'
      SOCIAL_LOGIN: 'false'
      REDIS_URL: 'redis://localhost:6379'
      # DATABASE_URL: 'sqlite:////app/db.sqlite3'
      # INTERNAL_MEDIA_HOST: 'http://web:3334'
      # ML_API_HOST: 'http://ml_api:3333'
      ACCOUNT_ALLOW_SIGN_UP: 'False'
      WEBPACK_LOADER_ENABLED: 'False'
      OCTOPRINT_TUNNEL_PORT_RANGE: '15853-15863'
      # TELEGRAM_BOT_TOKEN: '${TELEGRAM_BOT_TOKEN-}'
      # TWILIO_ACCOUNT_SID: '${TWILIO_ACCOUNT_SID-}'
      # TWILIO_AUTH_TOKEN: '${TWILIO_AUTH_TOKEN-}'
      # TWILIO_FROM_NUMBER: '${TWILIO_FROM_NUMBER-}'
      # SENTRY_DSN: '${SENTRY_DSN-}'
      # PUSHOVER_APP_TOKEN: '${PUSHOVER_APP_TOKEN-}'
      # SLACK_CLIENT_ID: '${SLACK_CLIENT_ID-}'
      # SLACK_CLIENT_SECRET: '${SLACK_CLIENT_SECRET-}'
      # VERSION:
      TZ: ${TZ}
      PUID: "568"
      GUID: "568"

    service:
      main:
        ports:
          http:
            port: 3334
      octoprint_tunnel:
        enabled: true
        primary: false
        type: LoadBalancer
        externalTrafficPolicy: Local
        LoadBalancerIP: ${LB_OBICO}
        ports:
          octoprint_tunnel1:
            enabled: true
            port: 15853
          octoprint_tunnel2:
            enabled: true
            port: 15854
          octoprint_tunnel3:
            enabled: true
            port: 15855
          octoprint_tunnel4:
            enabled: true
            port: 15856
          octoprint_tunnel5:
            enabled: true
            port: 15857
          octoprint_tunnel6:
            enabled: true
            port: 15858
          octoprint_tunnel7:
            enabled: true
            port: 15859
          octoprint_tunnel8:
            enabled: true
            port: 15860
          octoprint_tunnel9:
            enabled: true
            port: 15861
          octoprint_tunnel10:
            enabled: true
            port: 15862
          octoprint_tunnel11:
            enabled: true
            port: 15863

    ingress:
      main:
        enabled: true
        ingressClassName: "nginx-internal"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production

        hosts:
          - host: &host "obico.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix

        tls:
          - secretName: tls.obico
            hosts:
              - *host

    # persistence:
    #   nfs-nas-media:
    #     enabled: true
    #     type: custom
    #     volumeSpec:
    #       nfs:
    #         server: ${NAS_ADDRESS}
    #         path: /volume1/
    #     mountPath: /media
    #     readOnly: false

    # -- Deploy local redis instance.
    additionalContainers:
      - name: broker
        image: redis:7.0
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 11m
            memory: 32M
          limits:
            memory: 32M

      - name: ml_api
        image: docker.io/thespaghettidetective/ml_api:base-1.2-linux-amd64
        imagePullPolicy: IfNotPresent
        environment:
          FLASK_APP: 'server.py'
        command: bash -c "gunicorn --bind 0.0.0.0:3333 --workers 1 wsgi"