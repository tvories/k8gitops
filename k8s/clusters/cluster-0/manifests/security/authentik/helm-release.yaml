---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authentik
  namespace: security
spec:
  releaseName: authentik
  interval: 15m
  chart:
    spec:
      # renovate: registryUrl=https://charts.goauthentik.io
      chart: authentik
      version: 2024.2.0
      sourceRef:
        kind: HelmRepository
        name: authentik-charts
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation:
      retries: 1
  upgrade:
    remediation:
      retries: 1
  values:
    controller:
      annotations:
        secret.reloader.stakater.com/reload: &secret authentik-config
    serviceAccount:
      create: false

    env:
      AUTHENTIK_EMAIL__HOST: "${SECRET_SMTP_HOST}"
      AUTHENTIK_EMAIL__PORT: 587
      AUTHENTIK_EMAIL__USE_TLS: "true"
    envFrom:
      - secretRef:
          name: *secret

    ingress:
      enabled: true
      ingressClassName: nginx-external
      annotations:
        nginx.ingress.kubernetes.io/router.entrypoints: websecure
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
        nginx.org/websocket-services: authentik
        nginx.ingress.kubernetes.io/enable-global-auth: "false"
        cert-manager.io/cluster-issuer: letsencrypt-production
      hosts:
        - host: authentik.${SECRET_DOMAIN}
          paths:
            - path: /
              pathType: Prefix
      tls:
        - hosts:
            - authentik.${SECRET_DOMAIN}

    # Password in clear text because this is a random test instance
    authentik:
      log_level: debug
      error_reporting:
        enabled: true
      outposts:
        docker_image_base: ghcr.io/goauthentik/%(type)s:%(version)s
    redis:
      enabled: true
      persistence:
        enabled: false
      auth:
        enabled: false

    prometheus:
      serviceMonitor:
        create: true
        interval: 30s
        scrapeTimeout: 3s
      rules:
        create: true
    initContainers:
      init-db:
        image: ghcr.io/onedr0p/postgres-init:16.2
        imagePullPolicy: IfNotPresent
        envFrom:
          - secretRef:
              name: *secret
