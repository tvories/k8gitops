---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: unifi
  namespace: networking
spec:
  interval: 5m
  releaseName: unifi
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: unifi
      version: 4.3.0
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  values:
    probes:
      startup:
        enabled: false
        spec:
          initialDelaySeconds: 30
      liveness:
        enabled: false
      readiness:
        enabled: false
    image:
      repository: jacobalberty/unifi
      tag: v6.4.54
    podAnnotations:
      backup.velero.io/backup-volumes: unifi
      pre.hook.backup.velero.io/container: fsfreeze
      pre.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--freeze", "/unifi"]'
      post.hook.backup.velero.io/container: fsfreeze
      post.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--unfreeze", "/unifi"]'
    additionalContainers:
        fsfreeze:
          name: fsfreeze
          image: ghcr.io/k8s-at-home/fsfreeze:v2.37-r0
          volumeMounts:
            - name: unifi
              mountPath: /unifi
          securityContext:
            privileged: true
    persistence:
      data:
        enabled: true
        existingClaim: unifi-config
    # timezone: "${TIMEZONE}"
    # runAsRoot: true
    env:
      TZ: "${TIMEZONE}"
    ingress:
      main:
        enabled: true
        ingressClassName: "nginx-internal"
        annotations:
          ingress.kubernetes.io/ssl-redirect: "true"
          # kubernetes.io/ingress.class: "nginx-internal"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          kubernetes.io/tls-acme: "true"
          cert-manager.io/cluster-issuer: letsencrypt-production
        hosts:
          - host: "unifi.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - "unifi.${SECRET_DOMAIN}"
            secretName: unifi-cert
    service:
      main:
        type: LoadBalancer
        # loadBalancerIP: ${UNIFI_LB}
        externalIPs:
          - ${UNIFI_LB}
        externalTrafficPolicy: Local
    # controllerService:
    #   type: LoadBalancer
    #   externalTrafficPolicy: Local
    #   externalIPs:
    #     - ${UNIFI_LB}
    # stunService:
    #   type: LoadBalancer
    #   externalTrafficPolicy: Local
    #   externalIPs:
    #     - ${UNIFI_LB}
    # discoveryService:
    #   type: LoadBalancer
    #   externalTrafficPolicy: Local
    #   externalIPs:
    #     - ${UNIFI_LB}
    # podAnnotations:
    #   backup.velero.io/backup-volumes: unifi-data
    resources:
      requests:
        memory: 500Mi
        cpu: 35m
      limits:
        memory: 750Mi
    livenessProbe:
      enabled: false
    readinessProbe:
      enabled: false
    mongodb:
      enabled: false
      podAnnotations:
        backup.velero.io/backup-volumes: datadir
        # pre.hook.backup.velero.io/container: fsfreeze
        # pre.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--freeze", "/datadir"]'
        # post.hook.backup.velero.io/container: fsfreeze
        # post.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--unfreeze", "/datadir"]'
      persistence:
        enabled: true
        existingClaim: unifi-pvc-db
      containerSecurityContext:
        runAsNonRoot: false
      # additionalContainers:
      #   fsfreeze:
      #     name: fsfreeze
      #     image: ghcr.io/k8s-at-home/fsfreeze:v2.37-r0
      #     volumeMounts:
      #       - name: config
      #         mountPath: /config
      #     securityContext:
      #       privileged: true
