---
apiVersion: v1
kind: Service
metadata:
  name: mpsmpi
  namespace: web
spec:
  externalName: "mpsmpi.${SECRET_INTERNAL_DOMAIN}"
  type: ExternalName

---
apiVersion: v1
kind: Service
metadata:
  name: enderpi
  namespace: web
spec:
  externalName: "enderpi.${SECRET_INTERNAL_DOMAIN}"
  type: ExternalName

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mpsmpi-ingress
  namespace: web
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/tls-acme: "true"
    kubernetes.io/ingress.class: nginx-internal
    cert-manager.io/cluster-issuer: "letsencrypt-production"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  tls:
  - hosts:
    - mpsmpi.${SECRET_DOMAIN}
    secretName: nvr-cert
  rules:
  - host: mpsmpi.${SECRET_DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service: 
            name: mpsmpi
            port:
              number: 80
status:
  loadBalancer: {}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: enderpi-ingress
  namespace: web
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/tls-acme: "true"
    kubernetes.io/ingress.class: nginx-internal
    cert-manager.io/cluster-issuer: "letsencrypt-production"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  tls:
  - hosts:
    - enderpi.${SECRET_DOMAIN}
    secretName: nvr-cert
  rules:
  - host: enderpi.${SECRET_DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service: 
            name: enderpi
            port:
              number: 80
status:
  loadBalancer: {}
