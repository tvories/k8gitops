{
  "enabled": true,
  "semanticCommits": "enabled",
  "dependencyDashboard": true,
  "dependencyDashboardTitle": "Renovate Dashboard",
  "suppressNotifications": ["prIgnoreNotification"],
  "rebaseWhen": "conflicted",
  "helm-values": {
    "fileMatch": [
      "cluster/.+/helm-release\\.yaml$"
    ]
  },
  "kubernetes": {
    "fileMatch": [
      "cluster/.+\\.yaml$"
    ],
    "ignorePaths": [
      "cluster/base/"
    ],
  },
  "regexManagers": [
    // regexManager to read and process HelmRelease files
    {
      "fileMatch": [
        "cluster/.+\\.yaml$"
      ],
      "matchStrings": [
        // helm releases
        "registryUrl=(?<registryUrl>.*?)\n *chart: (?<depName>.*?)\n *version: (?<currentValue>.*)\n"
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process cert-manager CRD's
    {
      "fileMatch": [
        "cluster/crds/cert-manager/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n.*\\/(?<currentValue>.*?)\\/"
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process Traefik CRD's
    {
      "fileMatch": [
        "cluster/crds/traefik/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n *tag: v(?<currentValue>.*)\n"
      ],
      "datasourceTemplate": "helm"
    },
  ],
  packageRules: [
    // Setup datasources
    {
      matchDatasources: ["helm"],
      ignoreDeprecated: true,
    },
    {
      matchDatasources: ["docker"],
      commitMessageExtra: "to {{newVersion}}",
    },
    // Custom version schemes
    {
      matchDatasources: ["docker"],
      matchPackageNames: ["blakeblackshear/frigate"],
      versioning: "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-(?<compatibility>.*)$",
    },
    {
      matchDatasources: ["docker"],
      matchPackageNames: ["xirixiz/dsmr-reader-docker"],
      versioning: "regex:^(?<compatibility>.*)-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-\\d+\\.\\d+\\.\\d+$",
    },
    {
      matchDatasources: ["docker"],
      matchPackageNames: ["quay.io/minio/minio"],
      versioning: "regex:^RELEASE\\.(?<major>\\d{4})-(?<minor>\\d{2})-(?<patch>\\d{2})",
    },
    {
      matchDatasources: ["docker"],
      matchPackageNames: [
        "ghcr.io/linuxserver/calibre",
        "ghcr.io/linuxserver/calibre-web",
      ],
      versioning: "regex:^version-v?(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$",
    },
    {
      matchDatasources: ["docker"],
      matchPackageNames: ["ghcr.io/airsonic-advanced/airsonic-advanced"],
      versioning: "regex:^edge-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-SNAPSHOT\\.(?<build>\\d+)$",
    },
    // Version strategies
    {
      matchDatasources: ["docker"],
      matchPackageNames: ["ghcr.io/k8s-at-home/plex"],
      versioning: "loose",
    },
    {
      matchDatasources: ["docker"],
      matchPackageNames: ["tomsquest/docker-radicale"],
      versioning: "pep440",
    },
    // Group packages
    {
      matchDatasources: ["helm", "docker"],
      matchPackagePatterns: ["^rook.ceph"],
      groupName: "rook-ceph-suite",
      additionalBranchPrefix: "",
      separateMinorPatch: true,
      stabilityDays: 2,
    },
    {
      matchDatasources: ["helm", "docker"],
      matchPackageNames: [
        "quay.io/cilium/cilium",
        "quay.io/cilium/operator-generic",
        "cilium",
      ],
      groupName: "cilium",
      additionalBranchPrefix: "",
      separateMinorPatch: true,
      stabilityDays: 2,
    },
    {
      groupName: "thanos-suite",
      matchDatasources: ["docker", "github-releases", "helm"],
      matchPackagePatterns: ["quay.io/thanos/thanos", "thanos"],
      additionalBranchPrefix: "",
      separateMinorPatch: true,
      stabilityDays: 2,
    },
    {
      groupName: "vector-suite",
      matchDatasources: ["docker", "github-releases", "helm"],
      matchPackagePatterns: ["vector"],
      additionalBranchPrefix: "",
      separateMinorPatch: true,
      stabilityDays: 2,
    },
  ],
}
